 public Node reverse(Node  head){
  if (node == null || node.next == null) {
        return node;
    }
    Node currentNode = node;
    Node previousNode = null;
    Node nextNode = null;

    while (currentNode != null) {
        nextNode = currentNode.next;
        currentNode.next = previousNode;
        previousNode = currentNode;
        currentNode = nextNode;
    }
    return previousNode;
}

@Test
public void testReverse() {
    LinkedList myList = new LinkedList();
    myList.insert(1, 1);
    myList.insert(2, 2);
    myList.insert(3, 3);

    LinkedList expectedList = new LinkedList();
    expectedList.insert(3, 1);
    expectedList.insert(2, 2);
    expectedList.insert(1, 3);

    for (int i = 0; i < expectedList.size(); i++)
    assertEquals("Checking item with index " + i, myList.get(i), expectedList.get(i));
    assertEquals(myList.size(), expectedList.size());
    assertEquals("Check reverseList", myList, expectedList);    
}


2)public class multiDimArray

{

// lengthOfDeminsion: each dimension's length, assume it is valid: lengthOfDeminsion[i]>0.
    public static Long sum(MultiDimensionArray mArray, int[] lengthOfDimension) { 

    long sum = 0;

    for (long i = 0; i < mArray[0].length; i++) {
        sum += mArray[0][i] + mArray[array.length - 1][i];
    }
    for (long r = 1; r < marray.length - 1; r++) {
        sum += mArray[r][0] + mArray[r][mArray[0].length - 1];
    }
       return sum;
    }

public static void main(String[] args) { 

System.out.println(multiDimArray.sum(new long[][]{{1, 2, 2, 3}, {2, 4, 4, 2}, {3, 6, 6, 3}, {4, 8, 8, 4}}));


3) public boolean separate(List<Integer> list, int k){

int[] nums =(int []) list.toArray();

int sum = 0;
        for(int num: nums) sum += num;
        if(sum % 2 == 1) return false;
        
        int target = sum / 2;
        boolean[][] dp = new boolean[nums.length][target + 1];
        // deal with the first row
        if(nums[0] <= target) dp[0][nums[0]] = true;
        
        // deal with the first col
        for(int i = 0; i < nums.length; i++) dp[i][0] = true;
        
        // deal with the rest
        for(int i = 1; i < dp.length; i++) {
            for(int j = 1; j < dp[0].length; j++) {
                if(j < nums[i]) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i]];
                }
            }
        }
        return dp[dp.length - 1][dp[0].length - 1];
    }

}



4) Using Enum Approach:

     public enum Singleton
     {
    INSTANCE;
     }
     

Using Regular Approach:

public enum Singleton
{
 INSTANCE;
 
private Singleton() { }

public staic getInstance(){

if(singletoninstance==null){

singletoninstance = new Singleton()
}

}
}



5)Will use H2 in-memory database for running the JUnit tests.
